// export const NewForm = () => {
//   const form = useForm({
//     defaultValues: {
//       org_name: "",
//       email: "",
//       status:"",
//     },
//     validators: {
//       onSubmit: ({ value }) => {
//         if (!value.org_name || !value.email) {
//           return "Please fill in all fields";
//         }
//       },
//     },
//     onSubmit: ({ value }) => {
//       console.log(value);
//     },
//   });
//   return (
//     <Card className="w-3/5">
//       <CardHeader>
//         <CardTitle>Organization Settings</CardTitle>
//       </CardHeader>
//       <CardContent>
//         <form
//           className="flex flex-col gap-4"
//           onSubmit={(e) => {
//             e.preventDefault();
//             e.stopPropagation();
//           }}
//         >
//           <form.Field
//             name="org_name"
//             validatorAdapter={zodValidator}
//             validators={{
//               onChangeAsyncDebounceMs: 500,
//               //   onChangeAsync: ({ value }) => validateUsername(value),
//               onChange: OrgNameSchema,
//             }}
//             children={(field) => (
//               <div>
//                 <Label htmlFor="username">Organization name</Label>
//                 <div className="relative">
//                   <Input
//                     id="username"
//                     type="text"
//                     value={field.state.value}
//                     onChange={(e) => field.handleChange(e.target.value)}
//                   />
//                   {field.getMeta().isValidating && (
//                     <div className="absolute right-2 top-1/2 transform -translate-y-1/2">
//                       {/* <LoaderCircle className="animate-spin" /> */}
//                     </div>
//                   )}
//                 </div>
//                 {field.state.meta.errors && (
//                   <div className="text-red-500 text-sm mt-1">
//                     {field.state.meta.errors}
//                   </div>
//                 )}
//               </div>
//             )}
//           />
//           <form.Field
//             name="email"
//             validatorAdapter={zodValidator}
//             validators={{
//               onChangeAsyncDebounceMs: 500,
//               //   onChangeAsync: ({ value }) => validateUsername(value),
//               onChange: emailSchema,
//             }}
//             children={(field) => (
//               <div>
//                 <Label htmlFor="username">email</Label>
//                 <div className="relative">
//                   <Input
//                     id="username"
//                     type="text"
//                     value={field.state.value}
//                     onChange={(e) => field.handleChange(e.target.value)}
//                   />
//                   {field.getMeta().isValidating && (
//                     <div className="absolute right-2 top-1/2 transform -translate-y-1/2">
//                       {/* <LoaderCircle className="animate-spin" /> */}
//                     </div>
//                   )}
//                 </div>
//                 {field.state.meta.errors && (
//                   <div className="text-red-500 text-sm mt-1">
//                     {field.state.meta.errors}
//                   </div>
//                 )}
//               </div>
//             )}
//           />
//           <form.Field
//             name="status"
//             validatorAdapter={zodValidator}
//             validators={{
//               onChangeAsyncDebounceMs: 500,
//               //   onChangeAsync: ({ value }) => validateUsername(value),
//               onChange: statusSchema,
//             }}
//             children={(field) => (
//               <div>
//                 <Label htmlFor="status">Status</Label>
//                 <div className="relative">
//                   <Input
//                     id="status"
//                     type="text"
//                     className="w-1/5"
//                     value={field.state.value}
//                     onChange={(e) => field.handleChange(e.target.value)}
//                   />
//                   {field.getMeta().isValidating && (
//                     <div className="absolute right-2 top-1/2 transform -translate-y-1/2">
//                       {/* <LoaderCircle className="animate-spin" /> */}
//                     </div>
//                   )}
//                 </div>
//                 {field.state.meta.errors && (
//                   <div className="text-red-500 text-sm mt-1">
//                     {field.state.meta.errors}
//                   </div>
//                 )}
//               </div>
//             )}
//           />
//           <div></div>
//           <div></div>
//           <form.Subscribe
//             selector={(state) => state.errors}
//             children={(errors) =>
//               errors.length > 0 && (
//                 <Alert variant={"destructive"}>
//                   {/* <AlertCircle className="h-4 w-4" /> */}
//                   <AlertTitle>Error</AlertTitle>
//                   <AlertDescription>{errors}</AlertDescription>
//                 </Alert>
//               )
//             }
//           />
//         </form>
//       </CardContent>
//       <CardFooter className="flex justify-between">
//         <Button variant="outline" onClick={form.reset}>
//           Reset
//         </Button>
//         <form.Subscribe
//           selector={(state) => [state.canSubmit, state.isValidating]}
//           children={([canSubmit, isValidating]) => (
//             <Button
//               onClick={form.handleSubmit}
//               disabled={!canSubmit || isValidating}
//             >
//               Sign Up
//             </Button>
//           )}
//         />
//       </CardFooter>
//     </Card>
//   );
// };
